<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--

  ANDROID CHECKSTYLE CONFIGURATION
  ================================
  
  This PFH Checkstyle configuration is based on:

    - The sun_checks.xml file that was provided as part of Checkstyle
      distribution.
    - The shareme/Gist project's eclipse-checkstyle-android-best-practices at
      (https://gist.github.com/shareme/948425#file-eclipse-checkstyle-android-best-practices).
    
    - Other moninor modifications have been documented as best as possible.


  ** ANDROID CODE STYLE GUIDELINES **

    - http://source.android.com/source/code-style.html


  ** SUN CODING CONVENTIONS **

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker"> 

    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
    <!-- TODO: (pedro) temp turn off -->
    <module name="JavadocPackage">
        <property name="severity" value="ignore"></property> 
        <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"></metadata> 
    </module> 

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>
    
    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength"/>
    
    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter"/>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="RegexpSingleline">
       <property name="format" value="\s+$"/>
       <property name="minimum" value="0"/>
       <property name="maximum" value="0"/>
       <property name="message" value="Line has trailing spaces."/>
    </module>

    <module name="TreeWalker"> 
        <property name="tabWidth" value="4"></property> 

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!-- TODO: (pedro) temp turn off
        <module name="JavadocMethod"> 
            <property name="logLoadErrors" value="true"></property> 
            <property name="suppressLoadErrors" value="true"></property> 
        </module> 
        <module name="JavadocType"></module> 
        <module name="JavadocVariable"></module> 
        <module name="JavadocStyle"></module> 
        -->

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"></module> 
        <module name="LocalFinalVariableName"></module> 
        <module name="LocalVariableName"></module> 
        <module name="MemberName"> 
            <metadata name="net.sf.eclipsecs.core.comment" value="non public members should start with m"></metadata> 
            <property name="applyToPublic" value="false"></property> 
            <property name="format" value="^[m][a-zA-Z0-9]*$"></property> 
        </module> 
        <module name="MemberName"> 
            <metadata name="net.sf.eclipsecs.core.comment" value="only public starts without m"></metadata> 
            <property name="applyToProtected" value="false"></property> 
            <property name="applyToPrivate" value="false"></property> 
        </module> 
        <module name="MethodName">
            <!-- Allow for test methods with names like,
                 methodName_stateUnderTest_expectedBehavior_test() -->
            <property name="format" value="^([a-z][a-zA-Z0-9]*|[a-z][a-zA-Z0-9]+_[a-z][a-zA-Z0-9]+_[a-z][a-zA-Z0-9]+_test)$"></property> 
        </module> 

        <module name="PackageName"></module> 
        <module name="ParameterName"></module> 
        <module name="StaticVariableName"> 
            <metadata name="net.sf.eclipsecs.core.comment" value="starts with 's'"></metadata> 
            <property name="format" value="^[s][a-zA-Z0-9]*$"></property> 
        </module> 
        <module name="TypeName"></module> 

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport">
            <!-- Exception for JUnit/Hamcrest imports -->
            <property name="excludes" value="org.junit.Assert" />
            <property name="excludes" value="org.junit.matchers.JUnitMatchers" />
            <property name="excludes" value="org.hamcrest.core.AllOf " />
            <property name="excludes" value="org.hamcrest.core.AnyOf" />
            <property name="excludes" value="org.hamcrest.core.DescribedAs" />
            <property name="excludes" value="org.hamcrest.core.Is" />
            <property name="excludes" value="org.hamcrest.core.IsAnything" />
            <property name="excludes" value="org.hamcrest.core.IsEqual" />
            <property name="excludes" value="org.hamcrest.core.IsInstanceOf" />
            <property name="excludes" value="org.hamcrest.core.IsNot" />
            <property name="excludes" value="org.hamcrest.core.IsNull" />
            <property name="excludes" value="org.hamcrest.core.IsSame" />
            <!-- PowerMock Exception -->
            <property name="excludes" value="org.powermock.api.mockito.PowerMockito" />
        </module>
        <module name="IllegalImport"></module> 
        <module name="RedundantImport"></module> 
        <module name="UnusedImports"></module> 


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength"> 
            <property name="max" value="100"></property> 
        </module> 
        <module name="MethodLength"> 
            <property name="max" value="40"></property> 
        </module> 
        <module name="ParameterNumber"></module> 

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"></module> 
        <module name="GenericWhitespace"/> 
        <module name="MethodParamPad"></module> 
        <module name="NoWhitespaceAfter"> 
            <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"></property> 
        </module> 
        <module name="NoWhitespaceBefore"></module> 
        <module name="OperatorWrap"></module> 
        <module name="ParenPad"></module> 
        <module name="TypecastParenPad"></module> 
        <module name="WhitespaceAfter"></module> 
        <module name="WhitespaceAround"></module> 

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"></module> 
        <module name="RedundantModifier"></module> 

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"></module> 
        <module name="EmptyBlock"></module> 
        <module name="LeftCurly"></module> 
        <module name="NeedBraces"></module> 
        <module name="RightCurly"></module> 

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="EmptyStatement"></module> 
        <module name="EqualsHashCode"></module> 
        <module name="HiddenField"></module> 
        <module name="IllegalInstantiation"></module> 
        <module name="MagicNumber"></module> 
        <module name="InnerAssignment"></module> 
        <module name="MissingSwitchDefault"></module> 
        <module name="RedundantThrows"> 
            <property name="logLoadErrors" value="true"></property> 
            <property name="suppressLoadErrors" value="true"></property> 
        </module> 
        <module name="SimplifyBooleanExpression"></module> 
        <module name="SimplifyBooleanReturn"></module> 
        <!-- PFH: AvoidInlineConditionals ignored. -->
        <!-- <module name="AvoidInlineConditionals"/> -->

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="DesignForExtension"> 
            <property name="severity" value="ignore"></property> 
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"></metadata> 
        </module> 
        <module name="FinalClass"></module> 
        <module name="HideUtilityClassConstructor"></module> 
        <module name="InterfaceIsType"></module> 
        <module name="VisibilityModifier"></module> 

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"></module> 
        <module name="FinalParameters" />
        <module name="UpperEll"></module> 
        <module name="TodoComment"> 
            <property name="severity" value="ignore"></property> 
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"></metadata> 
        </module> 

        <!-- PFH Specific rules -->
        <module name="FinalLocalVariable"/>
        <module name="MissingDeprecated"/>
        <module name="MissingOverride"/>
        <module name="ModifiedControlVariable"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="MutableException"/>
        <module name="OneStatementPerLine"/>
        <module name="NestedTryDepth"/>
        <module name="NestedIfDepth"/>
        <module name="ParameterAssignment"/>

        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>

        <!-- FileContentsHolder required by SuppressionCommentFilter -->
        <module name="FileContentsHolder" />

    </module> 

    <module name="SuppressionCommentFilter">
        <!--
             Suppression in comments must be in the form of:

                CHECKSTYLE.OFF: Rule1|Rule2|Rule3 - Then a comment explaining
                CHECKSTYLE.ON: Rule1|Rule2|Rule3

            A comment explaining why the rule is being suppressed is required.
        -->
        <property name="offCommentFormat" value="CHECKSTYLE\.OFF:\s+([\w\|]+)\s+-\s+\w+.*" />
        <property name="onCommentFormat" value="CHECKSTYLE\.ON:\s+([\w\|]+)" />
        <property name="checkFormat" value="$1"/>
    </module>

</module>
